// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;

namespace FUMIT.Entidades
{
    using System.ComponentModel;
    using System.Runtime.Serialization;

    // ServiciosProgramados
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public partial class Serviciosprogramado: INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;


        [Required]
        [Display(Name = "Servicio programado ID")]
        [Key]
        public int ServicioProgramadoId { get; set; } // ServicioProgramadoId (Primary key)

        [Required]
        [Display(Name = "Cliente ID")]
        public int ClienteId { get; set; } // ClienteId

        [Required]
        [Display(Name = "Servicio ID")]
        public int ServicioId { get; set; } // ServicioId

        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Fecha servicio")]
        public System.DateTime FechaServicio { get; set; } // FechaServicio

        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Tipo")]
        public string Tipo { get; set; } // Tipo (length: 50)

        [Required]
        [Display(Name = "Cancelado")]
        public bool Cancelado { get; set; } // Cancelado

        [Required]
        [Display(Name = "Borrado")]
        public bool Borrado { get; set; } // Borrado

        [Required]
        [Display(Name = "Activo")]
        public bool Activo { get; set; } // Activo

        [Required]
        [Display(Name = "Prioridad")]
        public int Prioridad { get; set; } // Prioridad

        [MaxLength(250)]
        [StringLength(250)]
        [Display(Name = "Observaciones")]
        public string Observaciones { get; set; } // Observaciones (length: 250)

        [Display(Name = "Programacion servicios clientes ID")]
        public int? ProgramacionServiciosClientesId { get; set; } // ProgramacionServiciosClientesId

        [Required]
        [Display(Name = "Realizado")]
        public bool Realizado { get; set; } // Realizado

        // Reverse navigation

        /// <summary>
        /// Child Tickets where [Tickets].[ServicioProgramadoId] point to this entity (FK_Tickets_ServiciosProgramados)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Ticket> Tickets { get; set; } // Tickets.FK_Tickets_ServiciosProgramados

        // Foreign keys

        /// <summary>
        /// Parent Clientes pointed by [ServiciosProgramados].([ClienteId]) (FK_ServiciosProgramados_Clientes)
        /// </summary>
        public virtual Cliente Clientes { get; set; } // FK_ServiciosProgramados_Clientes

        /// <summary>
        /// Parent Programacionservicioscliente pointed by [ServiciosProgramados].([ProgramacionServiciosClientesId]) (FK_ServiciosProgramados_ProgramacionServiciosClientes)
        /// </summary>
        public virtual Programacionservicioscliente Programacionservicioscliente { get; set; } // FK_ServiciosProgramados_ProgramacionServiciosClientes

        /// <summary>
        /// Parent Servicio pointed by [ServiciosProgramados].([ServicioId]) (FK_ServiciosProgramados_Servicios)
        /// </summary>
        public virtual Servicio Servicio { get; set; } // FK_ServiciosProgramados_Servicios

        public Serviciosprogramado()
        {
            Cancelado = false;
            Borrado = false;
            Activo = true;
            Prioridad = 1000;
            Realizado = false;
            Tickets = new System.Collections.Generic.List<Ticket>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
// </auto-generated>
